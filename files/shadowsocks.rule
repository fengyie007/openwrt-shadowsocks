#!/bin/sh
#
# Copyright (C) 2015 OpenWrt-dist
# Copyright (C) 2015 Jian Chang <aa65535@live.com>
#
# This is free software, licensed under the GNU General Public License v3.
# See /LICENSE for more information.
#

TAG="SS_SPEC"          # iptables tag
FWI=$(uci get firewall.shadowsocks.path 2>/dev/null)  # firewall include file

usage() {
	cat <<-EOF
		Usage: ss-rules [options]

		Valid options are:

		    -s <server_ip>          ip address of shadowsocks remote server
		    -l <local_port>         port number of shadowsocks local server
		    -S <server_ip>          ip address of shadowsocks remote UDP server
		    -L <local_port>         port number of shadowsocks local UDP server
		    -i <ip_list_file>       a file content is bypassed ip list
		    -b <wan_ips>            wan ip of will be bypassed
		    -w <wan_ips>            wan ip of will be forwarded
		    -I <interface>          proxy only for the given interface
		    -d <target>             the default target of lan access control
		    -a <hosts_action>       lan ip of access control, need a prefix to
		                            define access control mode
		    -e <extra_options>      extra options for iptables
		    -o                      apply the rules to the OUTPUT chain
		    -u                      enable udprelay mode, TPROXY is required
		    -U                      enable udprelay mode, using different IP
		                            and ports for TCP and UDP
		    -f                      flush the rules
		    -h                      show this help message and exit
EOF
	exit $1
}

loger() {
	# 1.alert 2.crit 3.err 4.warn 5.notice 6.info 7.debug
	logger -st ss-rules[$$] -p$1 $2
}

flush_r() {
	iptables-save -c | grep -v "$TAG" | iptables-restore -c
	ip rule del fwmark 0x01/0x01 table 100 2>/dev/null
	ip route del local 0.0.0.0/0 dev lo table 100 2>/dev/null
	ipset -X ss_spec_lan_no 2>/dev/null
	ipset -X ss_spec_lan_bp 2>/dev/null
	ipset -X ss_spec_lan_fw 2>/dev/null
	ipset -X ss_spec_wan_bp 2>/dev/null
	ipset -X ss_spec_wan_fw 2>/dev/null
	[ -n "$FWI" ] && echo '#!/bin/sh' >$FWI
	return 0
}

ipset_r() {
	ipset -! -R <<-EOF || return 1
		create ss_spec_lan_no hash:net hashsize 64
		create ss_spec_lan_bp hash:net hashsize 64
		create ss_spec_lan_fw hash:net hashsize 64
		create ss_spec_wan_sp hash:net hashsize 64
		create ss_spec_wan_bp hash:net hashsize 64
		create ss_spec_wan_fw hash:net hashsize 64
		$(gen_iplist | sed -e "s/^/add ss_spec_wan_sp /")
		$(sed -e "s/^/add ss_spec_wan_bp /" ${IGNORED:=/dev/null} 2>/dev/null)
		$(for ip in $WAN_BP_IP; do echo "add ss_spec_wan_bp $ip"; done)
		$(for ip in $WAN_FW_IP; do echo "add ss_spec_wan_fw $ip"; done)
EOF
	return 0
}

ac_rule() {
	for action in $LAN_HOSTS_ACTION; do
		case "${action:0:1}" in
			n|N)
				ipset add ss_spec_lan_no ${action:2}
				;;
			b|B)
				ipset add ss_spec_lan_bp ${action:2}
				;;
			g|G)
				ipset add ss_spec_lan_fw ${action:2}
				;;
		esac
	done
	local ipt="iptables -t nat"
	include_ac_rules nat
	include_prerouting_rules nat
	$ipt -A SS_SPEC_WAN_FW -p tcp \
		-j REDIRECT --to-ports $local_port 2>/dev/null || {
		loger 3 "Can't redirect, please check the iptables."
		return 1
	}
	if [ "$OUTPUT" = 1 ]; then
		$ipt -I OUTPUT 1 -p tcp $EXT_ARGS -j SS_SPEC_WAN_AC
	fi
	return $?
}

tp_rule() {
	[ -n "$TPROXY" ] || return 0
	lsmod | grep -q TPROXY || return 0
	ip rule add fwmark 0x01/0x01 table 100
	ip route add local 0.0.0.0/0 dev lo table 100
	local ipt="iptables -t mangle"
	include_ac_rules mangle
	include_prerouting_rules mangle
	$ipt -A SS_SPEC_WAN_FW -p udp -j TPROXY --on-port "$LOCAL_PORT" \
		--tproxy-mark 0x01/0x01
	return $?
}

gen_include() {
	[ -n "$FWI" ] || return 0
	cat <<-CAT >>$FWI
	iptables-restore -n <<-EOF
	$(iptables-save | grep -E "$TAG|^\*|^COMMIT" |\
			sed -e "s/^-A \(OUTPUT\|PREROUTING\)/-I \1 1/")
	EOF
CAT
	return $?
}

include_ac_rules() {
	iptables-restore -n <<-EOF
	*$1
	:SS_SPEC_WAN_FW - [0:0]
	:SS_SPEC_WAN_AC - [0:0]
	:SS_SPEC_LAN_AC - [0:0]
	-A SS_SPEC_WAN_FW -m set --match-set ss_spec_wan_sp dst -j RETURN
	-A SS_SPEC_WAN_AC -m set --match-set ss_spec_wan_fw dst -j SS_SPEC_WAN_FW
	-A SS_SPEC_WAN_AC -m set --match-set ss_spec_wan_bp dst -j RETURN
	-A SS_SPEC_WAN_AC -j SS_SPEC_WAN_FW
	-A SS_SPEC_LAN_AC -m set --match-set ss_spec_lan_bp src -j RETURN
	-A SS_SPEC_LAN_AC -m set --match-set ss_spec_lan_fw src -j SS_SPEC_WAN_FW
	-A SS_SPEC_LAN_AC -m set --match-set ss_spec_lan_no src -j SS_SPEC_WAN_AC
	-A SS_SPEC_LAN_AC -j ${LAN_DEFAULT_TARGET:=SS_SPEC_WAN_AC}
	COMMIT
EOF
}

gen_prerouting_rules() {
	local protocol=tcp
	if [ "$1" = "mangle" ]; then
		protocol=udp
	fi
	if [ -z "$IFNAMES" ]; then
		echo -I PREROUTING 1 -p $protocol $EXT_ARGS -j SS_SPEC_LAN_AC
		return 0
	fi
	for ifname in $IFNAMES; do
		ifname=$(uci -P/var/state get network.$ifname.ifname 2>/dev/null)
		[ -z "$ifname" ] && continue
		echo -I PREROUTING 1 -i $ifname -p $protocol $EXT_ARGS -j SS_SPEC_LAN_AC
	done
}

include_prerouting_rules() {
	iptables-restore -n <<-EOF
	*$1
	$(gen_prerouting_rules $1)
	COMMIT
EOF
}

gen_iplist() {
	cat <<-EOF | grep -E "^([0-9]{1,3}\.){3}[0-9]{1,3}"
		0.0.0.0/8
		10.0.0.0/8
		100.64.0.0/10
		127.0.0.0/8
		169.254.0.0/16
		172.16.0.0/12
		192.0.0.0/24
		192.0.2.0/24
		192.31.196.0/24
		192.52.193.0/24
		192.88.99.0/24
		192.168.0.0/16
		192.175.48.0/24
		198.18.0.0/15
		198.51.100.0/24
		203.0.113.0/24
		224.0.0.0/4
		240.0.0.0/4
		255.255.255.255
		$server
		$SERVER
EOF
}

while getopts ":s:l:S:L:i:b:w:I:d:a:e:ouUfh" arg; do
	case "$arg" in
		s)
			server=$OPTARG
			;;
		l)
			local_port=$OPTARG
			;;
		S)
			SERVER=$OPTARG
			;;
		L)
			LOCAL_PORT=$OPTARG
			;;
		i)
			IGNORED=$OPTARG
			;;
		b)
			WAN_BP_IP=$OPTARG
			;;
		w)
			WAN_FW_IP=$OPTARG
			;;
		I)
			IFNAMES=$OPTARG
			;;
		d)
			LAN_DEFAULT_TARGET=$OPTARG
			;;
		a)
			LAN_HOSTS_ACTION=$OPTARG
			;;
		e)
			EXT_ARGS=$OPTARG
			;;
		o)
			OUTPUT=1
			;;
		u)
			TPROXY=1
			;;
		U)
			TPROXY=2
			;;
		f)
			flush_r
			exit 0
			;;
		h)
			usage 0
			;;
	esac
done

[ -z "$server" -o -z "$local_port" ] && usage 2

if [ "$TPROXY" = 1 ]; then
	SERVER=$server
	LOCAL_PORT=$local_port
elif [ "$TPROXY" = 2 ]; then
	: ${SERVER:?"You must assign an ip for the udp relay server."}
	: ${LOCAL_PORT:?"You must assign a port for the udp relay server."}
fi

flush_r && ipset_r && ac_rule && tp_rule && gen_include
RET=$?
[ "$RET" = 0 ] || loger 3 "Start failed!"
exit $RET
